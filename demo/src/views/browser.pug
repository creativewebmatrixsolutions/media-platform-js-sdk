include ./mixins/nav-bar
include ./mixins/styles

doctype html
html()
    head
        title Wix Media Platform - SDK Browser Demo

        script(src="/media-platform.min.js")
        script(src="/utils.js")
        script(src="/prismjs/prism.js")
        link(href="/prismjs/themes/prism.css")
        +styles

        script.
            var mediaPlatform = new MP.MediaPlatform({
                domain: "wixmp-410a67650b2f46baa5d003c6.appspot.com",
                authenticationUrl: "http://" + location.host + "/media-platform/auth-header"
            });

            var Image = MP.Image;
            var UploadUrlRequest = MP.file.UploadUrlRequest;
            var fileHost = "wixmp-410a67650b2f46baa5d003c6.wixmp.com";
            var imagesHost = "images-wixmp-410a67650b2f46baa5d003c6.wixmp.com";
            var videosHost = "wixmp-410a67650b2f46baa5d003c6.wixmp.com";

    body

        +nav-bar

        .content
            .group
                h2#Instantiation Instantiation
                .highlight
                    pre
                        code.language-javascript.
                            var mediaPlatform = new MP.MediaPlatform({
                                domain: "wixmp-410a67650b2f46baa5d003c6.appspot.com",
                                authenticationUrl: "http://localhost/media-platform/auth-header"
                            });

                h2#FileManagementApi File Management API
                    h4 Upload A file (any mime type)
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.uploadFile(path, file)
                                    .on("upload-success", function(response) {
                                        // handle success
                                    });

                    .demo-group
                        .executable-button
                            label(for='file-management' id="file-management-label").btn.
                                Upload File
                            .spinner
                            span#file-management-path.path-to-file
                            form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                                input(id='file-management' name='file' type='file')
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-management-payload

                    h4 Retrieve a list of uploaded files
                    .highlight
                        pre
                            code.language-javascript.
                                var listFileRequest = new MP.file.ListFilesRequest().setPageSize(3);

                                mediaPlatform.fileManager.listFiles(path, listFilesRequest, function(error, response) {
                                    // do something
                                });

                    .demo-group
                        .executable-button
                            button#file-list-button.btn.
                                Execute
                            .spinner

                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-list-payload

                    h4 Get file metadata by fileId
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                                    // do something
                                });
                    .demo-group
                        input(id='file-metadata-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        .executable-button
                            button#file-metadata-button.btn.
                                Execute
                            .spinner
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-metadata-payload

                    h4 Delete file by id
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                                    // do something
                                });
                    .demo-group
                        input(id='file-delete-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        .executable-button
                            button#file-delete-button.btn.
                                Execute
                            .spinner
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-delete-payload

                h2#ImageApi Image API
                    H4 Upload image
                    .highlight
                        pre
                            code.language-javascript#image-manipulation-code.
                                mediaPlatform.fileManager.uploadFile(path, file)
                                    .on("upload-success", function(response) {
                                        var image = new MP.Image(file);

                                        image.crop(500, 500)
                                            .jpeg(100, true)
                                            .blur(50)
                                            .toUrl();
                                  });

                    .demo-group
                        .executable-button
                            label(for='image-file' id='image-file-label' ).btn.
                                Upload Image
                            .spinner
                            span#image-file-path.path-to-file
                            form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                                input(id='image-file' name='file' type='file' accept='image/*')

                        select(id='image-manipulation-filters').filters-select
                            option(value='blur;50', selected= true) Blur
                            option(value='brightness;50') Brightness
                            option(value='contrast;50') Contrast
                            option(value='hue;50') Hue
                            option(value='saturation;-70') Saturation
                            option(value='unsharpMask;5.5,4.23,9.56') Unsharp Mask

                        .response
                            .highlight.highlight-response.url-block3
                                pre
                                    code.language-javascript#image-payload.

                            .output
                                img#image-output(src="/assets/img/no-preview.png")

                h2#VideoApi Video API
                H4 Upload Video
                .highlight
                    pre
                        code.language-javascript.
                            mediaPlatform.fileManager.uploadFile(path, file)
                                .on("upload-success", function(response) {
                                    // handle success
                                });

                .demo-group
                    .executable-button
                        label(for='video-file' id='video-file-label').btn.
                            Upload Video
                        .spinner
                        span#video-file-path.path-to-file
                        form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                            input(id='video-file' name='file' type='file' accept='video/*')

                    .response
                        .highlight.highlight-response
                            pre
                                code.language-javascript#video-payload.

                        .output
                            video#video-output(controls=true)

        script.
            var PATH_BASE = "/demo/";


            // FILE MANAGEMENT API
            (function() {

                // upload file
                var fileUploadButton = document.getElementById('file-management');
                var fileManagementLabel = document.getElementById('file-management-label');
                var fileUploadPayload = document.getElementById('file-management-payload');
                var fileUploadPath = document.getElementById('file-management-path');

                fileUploadButton.addEventListener('change', function() {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    fileUploadPath.innerHTML = path;

                    // TODO: make callback optional
                    startLoading(fileManagementLabel);
                    mediaPlatform.fileManager.deleteFileByPath(path, function(error, response) {
                        mediaPlatform.fileManager
                            .uploadFile(path, file)
                            .on('upload-success', function (response) {
                                stopLoading(fileManagementLabel);

                                fileUploadPayload.innerHTML = Prism.highlight(
                                    JSON.stringify(response.fileDescriptors, null, 2),
                                    Prism.languages.js);
                            })
                            .on('upload-error', function () {
                                stopLoading(fileManagementLabel);
                            });
                    });
                });

                // get list of files
                var fileListButton = document.getElementById('file-list-button');
                var fileListPayload = document.getElementById('file-list-payload');

                fileListButton.addEventListener('click', function() {
                    var listFileRequest = new MP.file.ListFilesRequest().setPageSize(3);

                    startLoading(fileListButton);
                    mediaPlatform.fileManager
                        .listFiles('/demo', listFileRequest, function(error, response) {
                            stopLoading(fileListButton);
                            if (error) {
                                console.error('error', error);
                                return
                            }

                            fileListPayload.innerHTML = Prism.highlight(
                                JSON.stringify(response, null, 2),
                                Prism.languages.js);
                        });
                });

                // get file metadata by id
                var fileMetadataButton = document.getElementById('file-metadata-button');
                var fileMetadataInput = document.getElementById('file-metadata-id-input');
                var fileMetadataPayload = document.getElementById('file-metadata-payload');

                fileMetadataButton.addEventListener('click', function() {
                    var fileId = fileMetadataInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(fileMetadataButton);
                    mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                        stopLoading(fileMetadataButton);
                        fileMetadataPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response.fileDescriptor, null, 2),
                            Prism.languages.js);
                    });
                })


                // delete file by id
                var fileDeleteButton = document.getElementById('file-delete-button');
                var fileDeleteInput = document.getElementById('file-delete-id-input');
                var fileDeletePayload = document.getElementById('file-delete-payload');

                fileDeleteButton.addEventListener('click', function () {
                    var fileId = fileDeleteInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(fileDeleteButton);
                    mediaPlatform.fileManager.deleteFileById(fileId, function (error, response) {
                        stopLoading(fileDeleteButton);
                        fileDeletePayload.innerHTML = error ? 'failed' : 'success';
                    });
                })
            })();


            // IMAGE API
            (function() {
                var imageFile = document.getElementById("image-file");
                var imageFileLabel = document.getElementById("image-file-label");
                var imageOutput = document.getElementById("image-output");
                var imagePayload = document.getElementById("image-payload");
                var imageFilePath = document.getElementById("image-file-path");
                var imageManipulationFilters = document.getElementById("image-manipulation-filters");
                var imageManipulationCode = document.getElementById("image-manipulation-code");
                var imageDescriptor;

                function getImageManipulationCode() {
                    var filter = imageManipulationFilters.value.split(';');
                    var filterName = filter[0];
                    var value = filter[1];

                    var filterFnText = filterName && value ? '.' + filterName + '(' + value + ')\n' : '';

                    return 'mediaPlatform.fileManager\n' +
                        '  .uploadFile(path, file)\n' +
                        '  .on("upload-success", function (response) {\n' +
                        '    var image = new MP.Image(file);\n\n' +
                        '    image.crop(500, 500)\n' +
                        '      .jpeg(100, true)\n' +
                        '      ' + filterFnText +
                        '      .toUrl();\n' +
                        '  });'

                }

                function parseFilterValue(filterValue) {
                    var fnName = filterValue.split(';')[0];
                    // to array with numbers
                    var args = filterValue.split(';')[1].split(',').map(function (val) {
                        return +val
                    });

                    return [fnName, args];
                }

                imageFile.addEventListener("change", function () {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];
                    var filterValueArr = parseFilterValue(imageManipulationFilters.value);


                    imageFilePath.innerHTML = path;

                    startLoading(imageFileLabel);
                    // TODO: make callback optional
                    mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                        // do nothing...
                    });

                    var fnName = filterValueArr[0];
                    var args = filterValueArr[1];

                    mediaPlatform.fileManager
                        .uploadFile(path, file)
                        .on('upload-success', function (response) {
                            stopLoading(imageFileLabel);
                            var descriptors = response.fileDescriptors;
                            var descriptor = imageDescriptor = descriptors[0];

                            // set payload
                            imagePayload.innerHTML = Prism.highlight(
                                JSON.stringify(descriptor, null, 2),
                                Prism.languages.js);

                            var image = new MP.Image(descriptor);

                            image
                                .crop(500, 500)
                                .jpeg(100, true);

                            // apply filter
                            image[fnName].apply(image, args);

                            var url = "http://" + imagesHost + image.toUrl().url;

                            // set image
                            imageOutput.setAttribute("src", url);
                        })
                        .on('upload-error', function(error) {
                            console.error('upload error:', error);
                            stopLoading(imageFileLabel);
                        });
                });

                imageManipulationFilters.addEventListener("change", function() {

                    imageManipulationCode.innerHTML = Prism.highlight(getImageManipulationCode(), Prism.languages.js)

                    if (!imageDescriptor) return

                    var filterValueArr = parseFilterValue(this.value);
                    var fnName = filterValueArr[0];
                    var args = filterValueArr[1];

                    var image = new MP.Image(imageDescriptor);

                    image
                        .crop(500, 500)
                        .jpeg(100, true);

                    // apply filter
                    image[fnName].apply(image, args);

                    var url = "http://" + imagesHost + image.toUrl().url;

                    // set image
                    imageOutput.setAttribute("src", url);
                });
            })();


            // VIDEO API
            (function () {
                var videoFile = document.getElementById('video-file');
                var videoFileLabel = document.getElementById('video-file-label');
                var videoOutput = document.getElementById('video-output');
                var videoPayload = document.getElementById('video-payload');
                var videoFilePath = document.getElementById('video-file-path');

                videoFile.addEventListener('change', function () {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    videoFilePath.innerHTML = path;

                    // TODO: make callback optional
                    startLoading(videoFileLabel);
                    mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                        mediaPlatform.fileManager
                            .uploadFile(path, file)
                            .on('upload-success', function (response) {
                                stopLoading(videoFileLabel);
                                var videos = response.fileDescriptors;
                                var video = videos[0];
                                var url = "http://" + videosHost + video.path;
                                var html = Prism.highlight(JSON.stringify(video, null, 2), Prism.languages.js);

                                videoOutput.setAttribute('src', url);
                                videoPayload.innerHTML = html;
                            })
                            .on('upload-error', function (err) {
                                stopLoading(videoFileLabel);
                                console.error('upload error:', err);
                            });
                    });
                })
            })();