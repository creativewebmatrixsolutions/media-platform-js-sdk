include ./mixins/nav-bar
include ./mixins/styles

doctype html
html()
    head
        title Wix Media Platform - Demo

        script(src="/media-platform.min.js")
        script(src="/prismjs/prism.js")
        link(href="/prismjs/themes/prism.css")
        +styles

        script.
            var mediaPlatform = new MP.MediaPlatform({
                domain: "wixmp-410a67650b2f46baa5d003c6.appspot.com",
                authenticationUrl: "http://" + location.host + "/media-platform/auth-header"
            });

            var Image = MP.Image;
            var UploadUrlRequest = MP.file.UploadUrlRequest;
            var fileHost = "wixmp-410a67650b2f46baa5d003c6.wixmp.com";
            var imagesHost = "images-wixmp-410a67650b2f46baa5d003c6.wixmp.com";
            var videosHost = "wixmp-410a67650b2f46baa5d003c6.wixmp.com";

    body

        +nav-bar

        .content
            .group
                h2#Instantiation Instantiation
                .highlight
                    pre
                        code.language-javascript.
                            var mediaPlatform = new MP.MediaPlatform({
                                domain: "wixmp-410a67650b2f46baa5d003c6.appspot.com",
                                authenticationUrl: "http://localhost/media-platform/auth-header"
                            });

                h2#FileManagementApi File Management API
                    h4 Upload A file (any mime type)
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager
                                    .uploadFile(path, file)
                                    .on("upload-success", function(response) {
                                        // handle success
                                    });

                    .demo-group
                        label(for='file-management').btn.
                            Upload File
                        span#file-management-path.path-to-file
                        form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                            input(id='file-management' name='file' type='file')
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-management-payload

                    h4 Retrieve a list of uploaded files
                    .highlight
                        pre
                            code.language-javascript.
                                var listFileRequest = new MP.file.ListFilesRequest();

                                mediaPlatform.fileManager
                                  .listFiles(path, listFilesRequest, function(error, response) {
                                    // handle response
                                  });

                    .demo-group
                        button#file-list-button.btn.
                            Execute

                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-list-payload

                    h4 Get metadata by fileId
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {

                                });
                    .demo-group
                        input(id='file-metadata-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        button#file-metadata-button.btn.
                            Execute
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-metadata-payload

                    h4 Delete file by id
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {

                                });
                    .demo-group
                        input(id='file-delete-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        button#file-delete-button.btn.
                            Execute
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-delete-payload

                h2#ImageApi Image API
                    H4 Upload image
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager
                                    .uploadFile(path, file)
                                    .on("upload-success", function(response) {
                                        // handle success
                                    });

                    .demo-group
                        label(for='image-file').btn.
                            Upload Image
                        span#image-file-path.path-to-file
                        form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                            input(id='image-file' name='file' type='file' accept='image/*')

                        .response
                            .highlight.highlight-response
                                pre
                                    code.language-javascript#image-payload.

                            .output
                                img#image-output(src="/assets/img/no-preview.jpg")

                    H4 Image manipulation
                    .highlight
                        pre
                            code#image-manipulation-code.language-javascript.
                                var image = new MP.Image(file);

                                image
                                  .crop(500, 500)
                                  .jpeg(100, true)
                                  .blur(50)
                    .demo-group
                        input(id='image-manipulation-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        select(id='image-manipulation-filters').filters-select
                            option(value='blur;50', selected= true) Blur
                            option(value='brightness;50') Brightness
                            option(value='contrast;50') Contrast
                            option(value='hue;50') Hue
                            option(value='saturation;-70') Saturation
                            option(value='unsharpMask;5.5,4.23,9.56') Unsharp Mask
                        br
                        button#image-manipulate-button.btn.
                            Execute

                        .response
                            .highlight.highlight-response
                                pre
                                    code.language-javascript#image-manipulation-payload.

                            .output
                                img#image-manipulation-output(src="/assets/img/no-preview.jpg")


                h2#VideoApi Video API
                H4 Upload Video
                .highlight
                    pre
                        code.language-javascript.
                            mediaPlatform.fileManager
                                .uploadFile(path, file)
                                .on("upload-success", function(response) {
                                    // handle success
                                });

                .demo-group
                    label(for='video-file').btn.
                        Upload Video
                    span#video-file-path.path-to-file
                    form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                        input(id='video-file' name='file' type='file' accept='video/*')

                    .response
                        .highlight.highlight-response
                            pre
                                code.language-javascript#video-payload.

                        .output
                            video#video-output(controls=true)

        script.
            var PATH_BASE = "/demo/";


            // FILE MANAGEMENT API
            (function() {

                // upload file
                var fileUploadButton = document.getElementById("file-management");
                var fileUploadPayload = document.getElementById("file-management-payload");
                var fileUploadPath = document.getElementById("file-management-path");

                fileUploadButton.addEventListener("change", function() {
                  var path = PATH_BASE + this.value.split("\\").pop();
                  var file = this.files[0];

                  fileUploadPath.innerHTML = path;

                  // TODO: make callback optional
                  mediaPlatform.fileManager.deleteFileByPath(path, function(error, response) {
                    // do nothing...
                  });

                  mediaPlatform.fileManager
                    .uploadFile(path, file)
                    .on('upload-success', function (response) {
                      var html = Prism.highlight(JSON.stringify(response.fileDescriptors, null, 2), Prism.languages.js);
                      fileUploadPayload.innerHTML = html;
                    });
                });


                // get list of files
                var fileListButton = document.getElementById("file-list-button");
                var fileListPayload = document.getElementById("file-list-payload");

                fileListButton.addEventListener("click", function() {
                    var listFileRequest = new MP.file.ListFilesRequest();

                    mediaPlatform.fileManager
                      .listFiles("/", listFileRequest, function(error, response) {
                           if (error) {
                             console.error('error', response.error);
                             return
                           }

                           var html = Prism.highlight(JSON.stringify(response, null, 2), Prism.languages.js);
                           fileListPayload.innerHTML = html;
                      });
                });

                // get file metadata by id
                var fileMetadataButton = document.getElementById('file-metadata-button');
                var fileMetadataInput = document.getElementById('file-metadata-id-input');
                var fileMetadataPayload = document.getElementById('file-metadata-payload');

                fileMetadataButton.addEventListener('click', function() {
                  var fileId = fileMetadataInput.value;
                  if (!fileId) {
                    console.log('please specify fileId');
                    return
                  }

                  mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                    var html = Prism.highlight(JSON.stringify(response.fileDescriptor, null, 2), Prism.languages.js);
                    fileMetadataPayload.innerHTML = html;
                  });
                })


                // delete file by id
                var fileDeleteButton = document.getElementById('file-delete-button');
                var fileDeleteInput = document.getElementById('file-delete-id-input');
                var fileDeletePayload = document.getElementById('file-delete-payload');

                fileDeleteButton.addEventListener('click', function () {
                var fileId = fileDeleteInput.value;
                if (!fileId) {
                  console.log('please specify fileId');
                  return
                }

                mediaPlatform.fileManager.deleteFileById(fileId, function (error, response) {
                  fileDeletePayload.innerHTML = error ? 'failed' : 'success';
                });
                })
            })();


            // IMAGE API
            (function() {
                var imageFile = document.getElementById("image-file");
                var imageOutput = document.getElementById("image-output");
                var imagePayload = document.getElementById("image-payload");
                var imageFilePath = document.getElementById("image-file-path");

                imageFile.addEventListener("change", function () {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    imageFilePath.innerHTML = path;

                    // TODO: make callback optional
                    mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                        // do nothing...
                    });

                    mediaPlatform.fileManager
                        .uploadFile(path, file)
                        .on('upload-success', function (response) {
                            var images = response.fileDescriptors;
                            var image = images[0];
                            var url = "http://" + imagesHost + image.path;
                            var html = Prism.highlight(JSON.stringify(image, null, 2), Prism.languages.js);

                            imageOutput.setAttribute("src", url);
                            imagePayload.innerHTML = html;
                        })
                        .on('upload-error', function(error) {
                          console.error('upload error:', error);
                        });
                });

              var imageManipulationIdInput = document.getElementById("image-manipulation-id-input");
              var imageManipulateButton = document.getElementById("image-manipulate-button");
              var imageManipulationFilters = document.getElementById("image-manipulation-filters");
              var imageManipulationCode = document.getElementById("image-manipulation-code");
              var imageOutput = document.getElementById("image-manipulation-output");
              var imagePayload = document.getElementById("image-manipulation-payload");

              var manipulationTemplate = 'var image = new MP.Image(file);\n\n' +
                'image\n' +
                '  .crop(500, 500)\n' +
                '  .jpeg(100, true)\n';


              imageManipulationFilters.addEventListener('change', function() {
                if (!this.value) {
                  return;
                }

                var fnName = this.value.split(';')[0];
                var args = this.value.split(';')[1];

                var codeString = manipulationTemplate + '  .' + fnName + '(' + args + ')';
                imageManipulationCode.innerHTML = Prism.highlight(codeString, Prism.languages.js);
              });

              imageManipulateButton.addEventListener('click', function() {
                var fileId = imageManipulationIdInput.value;
                var filterValue = imageManipulationFilters.value;

                if (!fileId) {
                  console.warn('please specify fileId');
                  return
                }

                if (!filterValue) {
                  console.warn('please specify filter type');
                  return
                }

                var fnName = filterValue.split(';')[0];
                // to array with numbers
                var args = filterValue.split(';')[1].split(',').map(function(val) {
                  return parseInt(val, 10);
                });

                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                    if (error) {
                      return
                    }
                    var image = new MP.Image(response);

                    image
                      .crop(500, 500)
                      .jpeg(100, true);

                    // apply filter
                    image[fnName].apply(image, args);

                    var url = "http://" + imagesHost + image[fnName].apply(image, args).toUrl().url;

                    imageOutput.setAttribute("src", url);
                    imagePayload.innerHTML = url;
                });
              });

            })();


            // VIDEO API
            (function () {
              var videoFile = document.getElementById("video-file");
              var videoOutput = document.getElementById("video-output");
              var videoPayload = document.getElementById("video-payload");
              var videoFilePath = document.getElementById("video-file-path");

              videoFile.addEventListener("change", function () {
                var path = PATH_BASE + this.value.split("\\").pop();
                var file = this.files[0];

                videoFilePath.innerHTML = path;

                // TODO: make callback optional
                mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                  // do nothing...
                });

                mediaPlatform.fileManager
                  .uploadFile(path, file)
                  .on('upload-success', function (response) {
                    var videos = response.fileDescriptors;
                    var video = videos[0];
                    var url = "http://" + videosHost + video.path;
                    var html = Prism.highlight(JSON.stringify(video, null, 2), Prism.languages.js);

                    videoOutput.setAttribute("src", url);
                    videoPayload.innerHTML = html;
                  })
                  .on('upload-error', function (error) {
                    console.error('upload error:', error);
                  });
              })

            })();